#!/usr/bin/zsh
# ZSHRC.LOCAL
# author: Markus <mtib> Becker
# mail: markus@tibyte.net
#

# source local keys
if [[ -f $HOME/.keys ]] then
    source $HOME/.keys
fi

# env variables
export GOPATH="$HOME/go"
export GITHUB="$HOME/github"
export PATH="$PATH:$GOPATH/bin:$HOME/bin:$HOME/.gem/ruby/2.3.0/bin:$HOME/.local/bin:$HOME/.cargo/bin"
export EDITOR="/usr/bin/vim" # default to vim
# export TERM="xterm-256color" # enable 256 colors
export VISUAL="/usr/bin/vim" # unsure if working..
export K4="3840x2160"        # sum screen resolution

alias diff="git diff"
alias du="du -h"
alias l="ls -lh"
alias la="ls -Alh"
alias lc="colorls"
alias svim="vim -u ~/.svimrc" # minimal version of vim
alias vmi="vim" # default to vim
alias vopen="vim \$(fzf)"
alias fzf="fzf-tmux"
alias gut="git" # correct me being a gut
alias :q="exit" # because vim is muscle memory
alias rmtmp="rm *~"
alias yaourt="yaourt --color"
alias yinstall="yaourt --color --noconfirm -S"
alias say="espeak -v german"
alias ccat="highlight -O ansi"
alias i3s="i3-swallow"
alias i3d="i3-swallow -d"
alias host="python3 -m http.server 9000"
alias setxkb-de="setxkbmap de -variant nodeadkeys"
alias setxkb-gb="setxkbmap gb"

# using spotify-now-git and clyrics
function singalong {
    singhere | less
}

function rec {
    asciinema rec $1 -w 0.2
}

function ytdm {
    youtube-dl -x --audio-format mp3 -o '%(title)s.%(ext)s' "$1"
}

function yhs {
    # set in .keys
    ssh $HSLOGIN -NCL localhost:7009:localhost:7009
}

function forward {
    ssh -L localhost:${1}:localhost:${1} $2
}

function singhere {
    clyrics $(spotify-now -i "%title - %artist")
}

CHECKSTYLE="$HOME/bin/checkstyle-java/checkstyle-7.6.1-tubs.jar"
CHECKSTYLECONF="$HOME/bin/checkstyle-java/tubs_checks.xml"

function jcheck {
    java -jar $CHECKSTYLE -c $CHECKSTYLECONF $1 ||\
    java -jar $CHECKSTYLE -c $CHECKSTYLECONF $1.java
}

# vim shortcuts
alias vzs="vim $HOME/.zshrc.local"
alias vi3="vim $GITHUB/dotfiles/i3/i3"

export VIMBG="github" # default vim colorscheme

## UPD ROUTINE ##
# used to update the system
# may require user / manual correspondence
# authorization using sudo of current user
# supposed to be run regularly
# CONSTANTS:
HEART=${HEART:-"your Sweetheart"} # set in .keys
PRONOUN=${PRONOUN:-"he/she"}      # set in .keys
ADJECTIVES=(
    "awesome" "cool" "pretty"
    "amazing" "gorgeous" "lovely"
    "beautiful" "great" "nice"
    "adorable" "bright" "charming"
    "creative" "determined" "funny"
    "friendly" "hard-working" "honest"
    "helpful" "humorous" "intellectual"
    "intuitive" "intelligent" "inventive"
    "kind" "patient" "polite"
    "quick-witted" "rational" "reliable"
    "resourceful" "romantic" "sensible"
    "sincere" "sympathetic" "thoughtful"
    "understanding" "warmhearted" "witty"
    "attractive" "breathtaking" "cheerful"
    "cute" "dear" "delightful"
    "deserving" "enchanting" "exceptional"
    "extraordinary" "friendly" "gifted"
    "genius" "gracious" "prima"
    "heavenly" "incredible" "inspiring"
    "impressive" "insightful" "inventive"
    "knowledgeable" "marvelous" "motivating"
    "noble" "outstanding" "patient"
    "quirky" "responsible" "sweet"
    "stunning" "reliable" "special"
    "smart" "thrilling" "trustworthy"
    "unselfish" "uplifting" "wise"
    "wonderful" "youthful" "clever"
    "encouraging" "graceful" "enjoyable"
    "spectacular" "splendid" "precious"
) # TODO more adjectives

# returns random adjective
# funniness of $RANDOM dealt with by upd()
function nadj() {
    let NUM=$[$RANDOM % ${#ADJECTIVES} + 1]
    echo $ADJECTIVES[$NUM]
}

function decline() {
    case $1 in
        "he")
            echo "him"
            ;;
        "she")
            echo "her"
            ;;
        "they")
            echo "them"
            ;;
    esac
}

# select a random adjective from $ADJECTIVES
# tell the user to tell $HEART that $PRONOUN is that adjective
# make them wait >:D but only one second for now
# then do updates via yaourt with Syyau
function upd() {
    TADJ=$RANDOM # would be cached otherwise
    TADJ=$(nadj)
    echo "\e[34;1m::\e[0;1m \e[1mHave you told \e[31;1m${HEART}\e[0;1m that ${PRONOUN}'s \e[31;1m${TADJ}\e[0;1m today?\e[0m"
    echo " 1. if not \e[1mtell $(decline ${PRONOUN})\e[0m"
    echo " 2. enter your password"
    echo " 3. have some updates ^.^"
    echo " 4. be awesome yourself"
    sleep 1
    echo "\e[34;1m::\e[0;1m \e[1mAuthorization... (sudo)\e[0m"
    yaourt -Syyau --noconfirm # aur update
}
## UPD END ##

export YTDIR="$HOME/Desktop/Youtube"
function ytd() {
    zsh ~/.ytd.sh
}

function pan {
    pandoc -V geometry:margin=.8in -f markdown_github+implicit_header_references+fancy_lists+startnum+definition_lists+table_captions+pipe_tables+pandoc_title_block+superscript+subscript+tex_math_dollars+raw_tex+latex_macros -sS $1 -o $2
}

case $HOST in
    "think")
        function wallpaper {
            echo "\e[32massuming 1366x768px screen\e[0m"
            convert $1 -resize 1366x768! $2
        }
        function smartpaper {
            wallpaper $1 /tmp/$1
            setbg /tmp/$1 $2
        }
        ;;
    "tipc")
        function wallpaper {
            echo "\e[32massuming 3840x2160px screen\e[0m"
            convert $1 -resize 3840x2160 $2
            echo "4knoborder cutting on image"
            4knoborder.sh $2
        }
        ;;
    *)
        function wallpaper {
            # $1 is file
            # $2 is screen resolution
            #    e.g. 1920x1080 or 1366x768
            # $3 is output file
            convert $1 -resize $2\! $3
        }
        ;;
esac

# clone from aur.archlinux.org
function gitaur {
    git clone https://aur.archlinux.org/$1
}

function sandoc {
    sdcf="/tmp/sdcfile.md"
    if [ -f header.md ]; then
        cat header.md > $sdcf;
    fi
    iconv -t utf-8 $1.md >> $sdcf;
    pandoc -f markdown_github+escaped_line_breaks-blank_before_header+backtick_code_blocks+fancy_lists+table_captions+pipe_tables+pandoc_title_block -V geometry:margin=1in -V papersize:A4 -V fontsize:11pt -V monofont:Terminus -So $1.pdf $sdcf
}

if [[ "$HOST" == "think" ]]; then
    wifi="wlp3s0"
    eth0="enp0s25"
    function ifup {
        case $1 in
            "wifi")
                sudo ip link set $wifi up
                echo -n "\e[32m"
                echo "starting wifi"
                ;;
            "lan")
                sudo systemctl start dhcpcd@$eth0
                sudo ip link set $eth0 up
                echo -n "\e[32m"
                echo "starting lan"
                ;;
            *)
                echo "\e[31muse 'wifi' or 'lan' interface"
                ;;
        esac
        echo -n "\e[0m"
    }

    function ifdown {
        case $1 in
            "wifi")
                sudo ip link set $wifi down
                echo -n "\e[32m"
                echo "shutting down wifi"
                ;;
            "lan")
                sudo systemctl stop dhcpcd@$eth0
                sudo ip link set $eth0 down
                echo -n "\e[32m"
                echo "shutting down lan"
                ;;
            *)
                echo "\e[31muse 'wifi' or 'lan' interface"
                ;;
        esac
        echo -n "\e[0m"
    }
fi

# used for backwards compatability
function aurinstall {
    yaourt -S $1
}

# SETUP BACKGROUNDs
source $HOME/.feh_constants.sh

# ALLOW SETTING OF PICTURES AS BG
function setbg {
    # $1 is file
    # $2 is time
    #    out of night, morning, midday, afternoon, evening
    function tell {
        echo "copying \e[32m$1\e[0m to \e[32m$2\e[0m"
        rm $2
        convert $1 -resize 1920x1080\! $2
    }
    case $2 in
        "night")
            tell $1 $TBG_NIGHT
            ;;
        "morning")
            tell $1 $TBG_MORNING
            ;;
        "midday")
            tell $1 $TBG_MIDDAY
            ;;
        "afternoon")
            tell $1 $TBG_AFTERNOON
            ;;
        "evening")
            tell $1 $TBG_EVENING
            ;;
        *)
            echo "you need to specify at which time to"
            echo "show the wallpaper:"
            echo "\e[37m{morning, midday, afternoon, evening, night}\e[0m"
            echo "you can use '\e[37mwallpaper file resolution output\e[0m'"
            echo "to get the file in the correct resolution"
    esac
    convert $TBG_MORNING $TBG_MIDDAY $TBG_AFTERNOON $TBG_EVENING $TBG_NIGHT +append $HOME/.bg.preview.jpg
}

function previewbg {
    echo "order: [morning, midday, afternoon, evening, night]"
    eom ~/.bg.preview.jpg &
}

# note taking function
function note {
    case $@ in
        "-e") vim ~/.note;;
        "") cat ~/.note|less;;
        *) echo -e "$@" >> ~/.note
            echo -e "\033[0;37m\"$@\" \033[1;30madded to your notes.\033[0m\n";;
    esac
}

# zsh syntax highlighting
zshsynt="/usr/share/zsh-syntax-highlighting/zsh-syntax-highlighting.zsh"
if [[ -f $zshsynt ]]; then
    source $zshsynt
else
    echo "You need to download the zsh-syntax-highlighting file"
    read -p "do you want to download it? [Y/n]" answ
    case $answ in
        [Yy])
            echo "root is required to install zsh-syntax-highlighting"
            sudo wget -O $zshsynt "https://raw.githubusercontent.com/zsh-users/zsh-syntax-highlighting/master/zsh-syntax-highlighting.zsh"
            ;;
        [Nn])
            echo "root is required to disable this prompt:"
            sudo touch $zshsynt
            ;;
        *)
            echo "answer not recognized, you will be asked again next time"
    esac
fi

